package com.mycompany.myrecipmanagerapplication.data;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DatabaseConnection {
    private static final Logger logger = Logger.getLogger(DatabaseConnection.class.getName());
    private static DatabaseConnection instance;
    private Connection connection;
    private final String url;
    private final String user;
    private final String password;
    

    protected DatabaseConnection() {
        this.url = "jdbc:mysql://localhost:3306/myRecipmanagerdatabase";
        this.user = "java_user";
        this.password = "password";
        initializeDriver();
    }

    public static synchronized DatabaseConnection getInstance() {
        if (instance == null) {
            instance = new DatabaseConnection();
        }
        return instance;
    }

    private void initializeDriver() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            logger.info("MySQL JDBC Driver sikeresen betöltve");
        } catch (ClassNotFoundException e) {
            logger.log(Level.SEVERE, "MySQL JDBC Driver nem található!", e);
            throw new RuntimeException("MySQL JDBC Driver nem található", e);
        }
    }

    public Connection getConnection() throws SQLException {
    try {
        Connection conn = DriverManager.getConnection(url, user, password);
        logger.info("Sikeres adatbázis kapcsolat létrehozva");
        return conn;
    } catch (SQLException e) {
        logger.log(Level.SEVERE, "Hiba az adatbázis kapcsolódáskor", e);
        throw e;
    }
}

    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return getConnection().prepareStatement(sql);
    }

    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return getConnection().prepareStatement(sql, autoGeneratedKeys);
    }

    public Statement createStatement() throws SQLException {
        return getConnection().createStatement();
    }

    public void beginTransaction() throws SQLException {
        getConnection().setAutoCommit(false);
    }

    public void commitTransaction() throws SQLException {
        getConnection().commit();
        getConnection().setAutoCommit(true);
    }

    public void rollbackTransaction() throws SQLException {
        getConnection().rollback();
        getConnection().setAutoCommit(true);
    }

    public void close() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
                logger.info("Adatbázis kapcsolat sikeresen lezárva");
            }
        } catch (SQLException e) {
            logger.log(Level.WARNING, "Hiba a kapcsolat lezárásakor", e);
        }
    }

    public boolean isConnected() {
        try {
            return connection != null && !connection.isClosed();
        } catch (SQLException e) {
            return false;
        }
    }
}